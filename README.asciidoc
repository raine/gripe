Gripe
-----

__la lurid little lvimgrep__

TIP: If you like Gripe and want to share the W00t!, I'm grateful for
https://www.gittip.com/bairuidahu/[tips] or
http://of-vim-and-vigor.blogspot.com/[beverages].

Gripe lets you search your project files for strings (patterns).

NOTE: You can use **Ag (Silversearcher)** with Gripe -- see __Gripe External Tool__ below.

By default, Gripe uses the builtin +:lvimgrep+ command internally, and:

* You don't have to remember ++:lvimgrep++'s argument order
* It highlights your search term in the results
* It has a shortcut to search for the word under the cursor
* It has glob shortcuts to avoid having to type things like
  ++\**/*.c++ --> just type ++@@c++ instead

If there are results, Gripe opens the +location-list+ and highlights
matches using the +hl-Search+ highlight group.

=== Gripe External Tool

Gripe supports the external tool, Ag (silver searcher) if the internal Vim
grep tool is too slow for your project.

To use Ag:

  let g:gripe_external_tool = 'ag'


The default Ag command is:

  let g:gripe_ag_cmd = 'ag --nobreak --nocolor --column --nogroup --noheading'


By default, Gripe expects the Ag tool to produce results in the following
format:

  let g:gripe_ag_format = '%f:%l:%c:%m'


There are several ways to use Gripe:

* The +<plug>GripeWord+ map which is mapped to <leader>gw by default. See +mapleader+.
* The +:Gripe+ command
* The +Gripe()+ function

**++<plug>GripeWord++**

Pressing ++<leader>gw++ will grep the _word_ under the cursor within
the path ++\**/*++

Pressing ++<leader>gw++ in visual mode will grep the visual selection
within ++\**/*++


**++:Gripe++**

  :Gripe /search term/ [path]
  :Gripe search term [path containing wildcard]

.Search Term

Internally, all patterns are delimited, but Gripe allows bare search terms for
simplicity. The slash '/' is shown as a delimiter here, but many non-alphanum
characters can be used as a delimiter (but not ^).

NOTE: If the Search Term is enclosed in non-alphanum characters then the
optional path is taken to be everything after the closing delimiter.

.Path

Gripe uses a default path of ++\**/*++ but you can override this by providing a path
as the final argument. For Gripe to recognise this as a path and not another
search term, ensure that it includes a +wildcard+. If your path contains
spaces, escape them with '\'.

.Glob Shortcuts

By adding this line to your $MYVIMRC:

  let g:gripe_use_glob_shortcuts = 1

You can use the following shortcuts:

* ++@++        = ++*++
* ++@@++       = ++\**/*++
* ++@txt++     = ++*.txt++
* ++@@txt++    = ++\**/*.txt++
* ++@@.txt++   = ++\**/*.txt++
* ++@@[c,h]++  = ++\**/*[c,h]++
* ++@@.[c,h]++ = ++\**/*.[c,h]++

If you don't like the use of '@' for this purpose:

  :let g:gripe_glob_shortcut_char = '+'


.Examples

  :Gripe ^function

Finds all function definitions in all files. To limit it to just vim files in
the current directory:

  :Gripe ^function *.vim

To search all vim files in all directories:

  :Gripe ^function **/*.vim

To search for foo and replace with bar in all txt files:

   :Gripe /foo/ @@txt | LLdo %s/foo/bar/g | update

NOTE: `LLdo` requires https://github.com/dahu/vimple[Vimple]

**++Gripe()++**

  :call Gripe("search terms [path]")

The +:Gripe+ command simply calls +Gripe()+ with all arguments quoted inside a
single string.
